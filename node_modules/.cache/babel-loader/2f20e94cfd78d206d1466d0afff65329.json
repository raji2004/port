{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Muhammad Muzammil\\\\Desktop\\\\react\\\\react-js-portfolio-website\\\\client\\\\src\\\\portfolio-container\\\\Home\\\\Header\\\\Header.js\";\nimport React, { useState, useEffect } from 'react';\nimport { TOTAL_SCREENS, GET_SCREEN_INDEX } from '../../../utilities/commonUtils';\nimport ScrollService from '../../../utilities/ScrollService';\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport './Header.css';\n\nconst Header = () => {\n  /* STATES TO BE USED */\n  const [selectedScreen, setSelectedScreen] = useState(0);\n  const [showHeaderOptions, setShowHeaderOptions] = useState(false);\n\n  const updateCurrentScreen = currentScreen => {\n    if (!currentScreen || !currentScreen.screenInView) return;\n    let screenIndex = GET_SCREEN_INDEX(currentScreen.screenInView);\n    if (screenIndex < 0) return;\n    setSelectedScreen(screenIndex);\n  };\n  /* SUBSCRIPTIONS */\n\n\n  let currentScreenSubscription = ScrollService.currentScreenBroadcaster.subscribe(updateCurrentScreen);\n\n  const getHeaderOptions = () => {\n    return TOTAL_SCREENS.map((Screen, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: Screen.screen_name,\n      className: getHeaderOptionsClasses(i),\n      onClick: () => switchScreen(i, Screen),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }\n    }, Screen.screen_name)));\n  };\n\n  const getHeaderOptionsClasses = index => {\n    let classes = \"header-option \";\n    if (index < TOTAL_SCREENS.length - 1) classes += \"header-option-seperator \";\n    if (selectedScreen === index) classes += \"selected-header-option \";\n    return classes;\n  };\n\n  const switchScreen = (index, screen) => {\n    let screenComponent = document.getElementById(screen.screen_name);\n    if (!screenComponent) return;\n    screenComponent.scrollIntoView({\n      behavior: 'smooth'\n    });\n    setSelectedScreen(index);\n    setShowHeaderOptions(false);\n  };\n\n  useEffect(() => {\n    return () => {\n      /* UNSUBSCRIBE THE SUBSCRIPTIONS */\n      currentScreenSubscription.unsubscribe();\n    };\n  }, [currentScreenSubscription]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-container\",\n    onClick: () => setShowHeaderOptions(!showHeaderOptions),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-parent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-hamburger\",\n    onClick: () => setShowHeaderOptions(!showHeaderOptions),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    className: \"header-hamburger-bars\",\n    icon: faBars,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }, \"Raji muhammad muzzamil\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: showHeaderOptions ? \"header-options show-hamburger-options\" : \"header-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, getHeaderOptions())));\n};\n\nexport default Header;","map":{"version":3,"sources":["C:/Users/Muhammad Muzammil/Desktop/react/react-js-portfolio-website/client/src/portfolio-container/Home/Header/Header.js"],"names":["React","useState","useEffect","TOTAL_SCREENS","GET_SCREEN_INDEX","ScrollService","faBars","FontAwesomeIcon","Header","selectedScreen","setSelectedScreen","showHeaderOptions","setShowHeaderOptions","updateCurrentScreen","currentScreen","screenInView","screenIndex","currentScreenSubscription","currentScreenBroadcaster","subscribe","getHeaderOptions","map","Screen","i","screen_name","getHeaderOptionsClasses","switchScreen","index","classes","length","screen","screenComponent","document","getElementById","scrollIntoView","behavior","unsubscribe"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { TOTAL_SCREENS, GET_SCREEN_INDEX } from '../../../utilities/commonUtils';\r\nimport ScrollService from '../../../utilities/ScrollService';\r\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n\r\n    /* STATES TO BE USED */\r\n    const [selectedScreen, setSelectedScreen] = useState(0);\r\n    const [showHeaderOptions, setShowHeaderOptions] = useState(false);\r\n\r\n    const updateCurrentScreen = (currentScreen) => {\r\n        if (!currentScreen || !currentScreen.screenInView)\r\n            return;\r\n\r\n        let screenIndex = GET_SCREEN_INDEX(currentScreen.screenInView);\r\n        if (screenIndex < 0)\r\n            return;\r\n\r\n        setSelectedScreen(screenIndex);\r\n    }\r\n\r\n    /* SUBSCRIPTIONS */\r\n    let currentScreenSubscription = ScrollService.currentScreenBroadcaster.subscribe(updateCurrentScreen);\r\n\r\n    const getHeaderOptions = () => {\r\n        return (\r\n            TOTAL_SCREENS.map((Screen, i) => (\r\n                <div key={Screen.screen_name} className={getHeaderOptionsClasses(i)}\r\n                    onClick={() => switchScreen(i, Screen)}\r\n                >\r\n                    <span>{Screen.screen_name}</span>\r\n                </div>\r\n            ))\r\n        )\r\n    }\r\n\r\n    const getHeaderOptionsClasses = (index) => {\r\n        let classes = \"header-option \";\r\n        if (index < TOTAL_SCREENS.length - 1)\r\n            classes += \"header-option-seperator \";\r\n\r\n        if (selectedScreen === index)\r\n            classes += \"selected-header-option \";\r\n\r\n        return classes;\r\n    }\r\n\r\n    const switchScreen = (index, screen) => {\r\n        let screenComponent = document.getElementById(screen.screen_name);\r\n        if (!screenComponent)\r\n            return;\r\n\r\n        screenComponent.scrollIntoView({ behavior: 'smooth' });\r\n        setSelectedScreen(index);\r\n        setShowHeaderOptions(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            /* UNSUBSCRIBE THE SUBSCRIPTIONS */\r\n            currentScreenSubscription.unsubscribe();\r\n        }\r\n    }, [currentScreenSubscription]);\r\n\r\n    return (\r\n        <div className=\"header-container\" onClick={() => setShowHeaderOptions(!showHeaderOptions)}>\r\n            <div className=\"header-parent\">\r\n                <div className=\"header-hamburger\" onClick={() => setShowHeaderOptions(!showHeaderOptions)}>\r\n                    <FontAwesomeIcon className=\"header-hamburger-bars\" icon={faBars} />\r\n                </div>\r\n                <div className=\"header-logo\">\r\n                    <span>Raji muhammad muzzamil</span>\r\n                </div>\r\n                <div className={(showHeaderOptions) ? \"header-options show-hamburger-options\" : \"header-options\"}>\r\n                    {getHeaderOptions()}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n"]},"metadata":{},"sourceType":"module"}