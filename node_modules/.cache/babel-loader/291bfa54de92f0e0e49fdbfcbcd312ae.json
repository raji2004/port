{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_util_isArray,_operators_map,_util_isObject,_from PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { map } from '../operators/map';\nimport { isObject } from '../util/isObject';\nimport { from } from './from';\nexport function forkJoin() {\n  var sources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n\n  if (sources.length === 1) {\n    var first_1 = sources[0];\n\n    if (isArray(first_1)) {\n      return forkJoinInternal(first_1, null);\n    }\n\n    if (isObject(first_1) && Object.getPrototypeOf(first_1) === Object.prototype) {\n      var keys = Object.keys(first_1);\n      return forkJoinInternal(keys.map(function (key) {\n        return first_1[key];\n      }), keys);\n    }\n  }\n\n  if (typeof sources[sources.length - 1] === 'function') {\n    var resultSelector_1 = sources.pop();\n    sources = sources.length === 1 && isArray(sources[0]) ? sources[0] : sources;\n    return forkJoinInternal(sources, null).pipe(map(function (args) {\n      return resultSelector_1.apply(void 0, args);\n    }));\n  }\n\n  return forkJoinInternal(sources, null);\n}\n\nfunction forkJoinInternal(sources, keys) {\n  return new Observable(function (subscriber) {\n    var len = sources.length;\n\n    if (len === 0) {\n      subscriber.complete();\n      return;\n    }\n\n    var values = new Array(len);\n    var completed = 0;\n    var emitted = 0;\n\n    var _loop_1 = function (i) {\n      var source = from(sources[i]);\n      var hasValue = false;\n      subscriber.add(source.subscribe({\n        next: function (value) {\n          if (!hasValue) {\n            hasValue = true;\n            emitted++;\n          }\n\n          values[i] = value;\n        },\n        error: function (err) {\n          return subscriber.error(err);\n        },\n        complete: function () {\n          completed++;\n\n          if (completed === len || !hasValue) {\n            if (emitted === len) {\n              subscriber.next(keys ? keys.reduce(function (result, key, i) {\n                return result[key] = values[i], result;\n              }, {}) : values);\n            }\n\n            subscriber.complete();\n          }\n        }\n      }));\n    };\n\n    for (var i = 0; i < len; i++) {\n      _loop_1(i);\n    }\n  });\n}","map":{"version":3,"sources":["../../../src/internal/observable/forkJoin.ts"],"names":[],"mappings":"AAAA;AAEA,SAAS,UAAT,QAAwB,eAAxB;AACA,SAAS,OAAT,QAAoB,iBAApB;AACA,SAAS,GAAT,QAAmB,kBAAnB;AAEA,SAAS,QAAT,QAAqB,kBAArB;AAsIA,SAAM,IAAN,QAAgB,QAAhB;AACE,OAAA,SAAA,QAAA,GAAiB;MAAjB,OAAA,GAAA,E;;AAAA,OAAA,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,SAAA,CAAiB,MAAjB,EAAiB,EAAA,EAAjB,EAAiB;;AAEjB;;MACE,OAAM,CAAA,MAAN,KAAc,C,EAAQ;AACtB,QAAI,OAAO,GAAC,OAAM,CAAE,CAAF,CAAlB;;QACE,OAAO,CAAA,OAAA,C,EAAA;AACR,aAAA,gBAAA,CAAA,OAAA,EAAA,IAAA,CAAA;AAED;;QACE,QAAU,CAAA,OAAA,CAAV,IAAoB,MAAK,CAAA,cAAL,CAAY,OAAZ,MAAY,MAAA,CAAA,S,EAAA;AAChC,UAAA,IAAO,GAAA,MAAA,CAAA,IAAA,CAAgB,OAAhB,CAAP;AACD,aAAA,gBAAA,CAAA,IAAA,CAAA,GAAA,CAAA,UAAA,GAAA,EAAA;AAAA,eAAA,OAAA,CAAA,GAAA,CAAA;AAAA,OAAA,CAAA,EAAA,IAAA,CAAA;AACF;AAGD;;MACE,OAAM,OAAA,CAAA,OAAc,CAAG,MAAjB,GAAyB,CAAzB,CAAN,KAAiD,U,EAAA;AACjD,QAAA,gBAAmB,GAAA,OAAW,CAAC,GAAZ,EAAnB;AACA,IAAA,OAAO,GAAA,OAAA,CAAA,MAAA,KAAiB,CAAjB,IAA0B,OAAM,CAAI,OACrC,CAAA,CAAA,CADiC,CAAhC,GACA,OAAW,CAAK,CAAL,CADX,GACgB,OADvB;AAGD,WAAA,gBAAA,CAAA,OAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA;AAAA,aAAA,gBAAA,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA,IAAA,CAAA;AAAA,KAAA,CAAA,CAAA;AAED;;AACD,SAAA,gBAAA,CAAA,OAAA,EAAA,IAAA,CAAA;AAED;;AACE,SAAA,gBAAA,CAAsB,OAAtB,EAAsB,IAAtB,EAAsB;AACpB,SAAA,IAAS,UAAT,CAAoB,UAAO,UAAP,EAAO;AAC3B,QAAI,GAAG,GAAA,OAAQ,CAAA,MAAf;;QACE,GAAA,KAAA,C,EAAW;AACX,MAAA,UAAO,CAAA,QAAP;AACD;AACD;;AACA,QAAI,MAAA,GAAS,IAAI,KAAJ,CAAK,GAAL,CAAb;AACA,QAAI,SAAO,GAAK,CAAhB;kBACS,C;;QACP,OAAM,GAAM,UAAQ,CAAR,EAAQ;AACpB,UAAI,MAAA,GAAQ,IAAG,CAAA,OAAM,CAAA,CAAA,CAAN,CAAf;AACA,UAAA,QAAW,GAAI,KAAf;AACE,MAAA,UAAM,CAAA,GAAN,CAAM,MAAA,CAAA,SAAA,CAAK;YACT,EAAA,UAAK,KAAL,EAAe;cACb,CAAA,Q,EAAW;AACX,YAAA,QAAO,GAAG,IAAV;AACD,YAAA,OAAA;AACD;;AACD,UAAA,MAAA,CAAA,CAAA,CAAA,GAAA,KAAA;AACD,SAPW;AAQX,QAAA,KAAA,EAAA,UAAU,GAAV,EAAU;AAAA,iBAAA,UAAA,CAAA,KAAA,CAAA,GAAA,CAAA;AAAA,SARC;AAST,QAAA,QAAA,EAAA,YAAY;AACZ,UAAA,SAAI;;cACF,SAAI,KAAO,GAAX,IAAqB,CAAA,Q,EAAA;gBACnB,OAAA,KAAW,G,EAAK;AACd,cAAA,UAAK,CAAA,IAAL,CAAY,IAAA,GACZ,IAAA,CAAA,MAAA,CAAQ,UAAA,MAAA,EAAA,GAAA,EAAA,CAAA,EAAA;AAAA,uBAAA,MAAA,CAAA,GAAA,CAAA,GAAA,MAAA,CAAA,CAAA,CAAA,EAAA,MAAA;AAAA,eAAR,EAAQ,EAAR,CADY,GAEf,MAFG;AAGJ;;AACD,YAAA,UAAA,CAAA,QAAA;AACF;AACC;AAnBS,OAAL,CAAN;AAJJ,K;;cAAS,GAAC,C,EAAA,CAAA,GAAA,G,EAAA,CAAA,E,EAAA;AAwBT,MAAA,OAAA,CAAA,CAAA,CAAA;AACA;AACJ,GAlCG,CAAA","sourcesContent":["/** PURE_IMPORTS_START _Observable,_util_isArray,_operators_map,_util_isObject,_from PURE_IMPORTS_END */\r\nimport { Observable } from '../Observable';\r\nimport { isArray } from '../util/isArray';\r\nimport { map } from '../operators/map';\r\nimport { isObject } from '../util/isObject';\r\nimport { from } from './from';\r\nexport function forkJoin() {\r\n    var sources = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        sources[_i] = arguments[_i];\r\n    }\r\n    if (sources.length === 1) {\r\n        var first_1 = sources[0];\r\n        if (isArray(first_1)) {\r\n            return forkJoinInternal(first_1, null);\r\n        }\r\n        if (isObject(first_1) && Object.getPrototypeOf(first_1) === Object.prototype) {\r\n            var keys = Object.keys(first_1);\r\n            return forkJoinInternal(keys.map(function (key) { return first_1[key]; }), keys);\r\n        }\r\n    }\r\n    if (typeof sources[sources.length - 1] === 'function') {\r\n        var resultSelector_1 = sources.pop();\r\n        sources = (sources.length === 1 && isArray(sources[0])) ? sources[0] : sources;\r\n        return forkJoinInternal(sources, null).pipe(map(function (args) { return resultSelector_1.apply(void 0, args); }));\r\n    }\r\n    return forkJoinInternal(sources, null);\r\n}\r\nfunction forkJoinInternal(sources, keys) {\r\n    return new Observable(function (subscriber) {\r\n        var len = sources.length;\r\n        if (len === 0) {\r\n            subscriber.complete();\r\n            return;\r\n        }\r\n        var values = new Array(len);\r\n        var completed = 0;\r\n        var emitted = 0;\r\n        var _loop_1 = function (i) {\r\n            var source = from(sources[i]);\r\n            var hasValue = false;\r\n            subscriber.add(source.subscribe({\r\n                next: function (value) {\r\n                    if (!hasValue) {\r\n                        hasValue = true;\r\n                        emitted++;\r\n                    }\r\n                    values[i] = value;\r\n                },\r\n                error: function (err) { return subscriber.error(err); },\r\n                complete: function () {\r\n                    completed++;\r\n                    if (completed === len || !hasValue) {\r\n                        if (emitted === len) {\r\n                            subscriber.next(keys ?\r\n                                keys.reduce(function (result, key, i) { return (result[key] = values[i], result); }, {}) :\r\n                                values);\r\n                        }\r\n                        subscriber.complete();\r\n                    }\r\n                }\r\n            }));\r\n        };\r\n        for (var i = 0; i < len; i++) {\r\n            _loop_1(i);\r\n        }\r\n    });\r\n}\r\n//# sourceMappingURL=forkJoin.js.map\r\n"]},"metadata":{},"sourceType":"module"}