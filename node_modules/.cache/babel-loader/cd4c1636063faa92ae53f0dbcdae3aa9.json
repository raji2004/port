{"ast":null,"code":"import { TOTAL_SCREENS } from './commonUtils';\nimport { Subject } from 'rxjs';\nexport default class ScrollService {\n  /* SINGLETON CLASS INSTANCE */\n\n  /* BROADCASTERS */\n  constructor() {\n    this.scrollToHireMe = () => {\n      let contactMeScreen = document.getElementById(\"Contact Me\");\n      if (!contactMeScreen) return;\n      contactMeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    this.isElementInView = (elem, type) => {\n      let rec = elem.getBoundingClientRect();\n      let elementTop = rec.top;\n      let elemBottom = rec.bottom;\n      /* Partially Visible */\n\n      let partiallyVisible = elementTop < window.innerHeight && elemBottom >= 0;\n      /* Completely Visible */\n\n      let completelyVisible = elementTop >= 0 && elemBottom <= window.innerHeight;\n\n      switch (type) {\n        case \"partial\":\n          return partiallyVisible;\n\n        case \"complete\":\n          return completelyVisible;\n\n        default:\n          return false;\n      }\n    };\n\n    this.checkCurrentScreenUnderViewport = event => {\n      if (!event || Object.keys(event).length < 1) return;\n\n      for (let screen of TOTAL_SCREENS) {\n        let screenFromDOM = document.getElementById(screen.screen_name);\n        if (!screenFromDOM) continue;\n        let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\n        let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\n\n        if (fullyVisible || partiallyVisible) {\n          if (partiallyVisible && !screen.alreadyRendered) {\n            //BROADCAST FADE IN EFFECT\n            ScrollService.currentScreenFadeIn.next({\n              fadeInScreen: screen.screen_name\n            });\n            screen['alreadyRendered'] = true;\n            break;\n          }\n\n          if (fullyVisible) {\n            // BROADCAST SCREEN NAME\n            ScrollService.currentScreenBroadcaster.next({\n              screenInView: screen.screen_name\n            });\n            break;\n          }\n        }\n      }\n    };\n\n    /* ADD SCROLL EVENT TO WINDOW */\n    window.addEventListener('scroll', this.checkCurrentScreenUnderViewport);\n  }\n  /* SCROLL TO HIRE ME / CONTACT ME SCREEN */\n\n\n}\nScrollService.scrollHandler = new ScrollService();\nScrollService.currentScreenBroadcaster = new Subject();\nScrollService.currentScreenFadeIn = new Subject();","map":{"version":3,"sources":["C:/Users/Muhammad Muzammil/Desktop/react/react-js-portfolio-website/client/src/utilities/ScrollService.js"],"names":["TOTAL_SCREENS","Subject","ScrollService","constructor","scrollToHireMe","contactMeScreen","document","getElementById","scrollIntoView","behavior","isElementInView","elem","type","rec","getBoundingClientRect","elementTop","top","elemBottom","bottom","partiallyVisible","window","innerHeight","completelyVisible","checkCurrentScreenUnderViewport","event","Object","keys","length","screen","screenFromDOM","screen_name","fullyVisible","alreadyRendered","currentScreenFadeIn","next","fadeInScreen","currentScreenBroadcaster","screenInView","addEventListener","scrollHandler"],"mappings":"AAAA,SAASA,aAAT,QAA8B,eAA9B;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA,eAAe,MAAMC,aAAN,CAAoB;AAEjC;;AAGA;AAIAC,EAAAA,WAAW,GAAG;AAAA,SAMdC,cANc,GAMG,MAAM;AACrB,UAAIC,eAAe,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAtB;AACA,UAAI,CAACF,eAAL,EAAsB;AAEtBA,MAAAA,eAAe,CAACG,cAAhB,CAA+B;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAA/B;AACD,KAXa;;AAAA,SAcdC,eAdc,GAcI,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAChC,UAAIC,GAAG,GAAGF,IAAI,CAACG,qBAAL,EAAV;AACA,UAAIC,UAAU,GAAGF,GAAG,CAACG,GAArB;AACA,UAAIC,UAAU,GAAGJ,GAAG,CAACK,MAArB;AAEA;;AACA,UAAIC,gBAAgB,GAAGJ,UAAU,GAAGK,MAAM,CAACC,WAApB,IAAmCJ,UAAU,IAAI,CAAxE;AAEA;;AACA,UAAIK,iBAAiB,GAAGP,UAAU,IAAI,CAAd,IAAmBE,UAAU,IAAIG,MAAM,CAACC,WAAhE;;AAEA,cAAQT,IAAR;AACE,aAAK,SAAL;AACI,iBAAOO,gBAAP;;AAEJ,aAAK,UAAL;AACI,iBAAOG,iBAAP;;AAEJ;AACI,iBAAO,KAAP;AARN;AAUD,KAnCa;;AAAA,SAsCdC,+BAtCc,GAsCqBC,KAAD,IAAW;AAC3C,UAAG,CAACA,KAAD,IAAUC,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,MAAnB,GAA4B,CAAzC,EACA;;AAEA,WAAI,IAAIC,MAAR,IAAkB5B,aAAlB,EAAgC;AAC9B,YAAI6B,aAAa,GAAGvB,QAAQ,CAACC,cAAT,CAAwBqB,MAAM,CAACE,WAA/B,CAApB;AACA,YAAG,CAACD,aAAJ,EACA;AAEA,YAAIE,YAAY,GAAG,KAAKrB,eAAL,CAAqBmB,aAArB,EAAoC,UAApC,CAAnB;AACA,YAAIV,gBAAgB,GAAG,KAAKT,eAAL,CAAqBmB,aAArB,EAAoC,SAApC,CAAvB;;AAEA,YAAGE,YAAY,IAAIZ,gBAAnB,EAAqC;AACnC,cAAGA,gBAAgB,IAAI,CAACS,MAAM,CAACI,eAA/B,EAA+C;AAC7C;AACA9B,YAAAA,aAAa,CAAC+B,mBAAd,CAAkCC,IAAlC,CAAuC;AACrCC,cAAAA,YAAY,EAAEP,MAAM,CAACE;AADgB,aAAvC;AAGAF,YAAAA,MAAM,CAAC,iBAAD,CAAN,GAA4B,IAA5B;AACA;AACD;;AAED,cAAIG,YAAJ,EAAkB;AAChB;AACA7B,YAAAA,aAAa,CAACkC,wBAAd,CAAuCF,IAAvC,CAA4C;AAC1CG,cAAAA,YAAY,EAAET,MAAM,CAACE;AADqB,aAA5C;AAGA;AACD;AACF;AACF;AACF,KArEa;;AACZ;AACAV,IAAAA,MAAM,CAACkB,gBAAP,CAAwB,QAAxB,EAAkC,KAAKf,+BAAvC;AACD;AAED;;;AAdiC;AAAdrB,a,CAGZqC,a,GAAgB,IAAIrC,aAAJ,E;AAHJA,a,CAMZkC,wB,GAA2B,IAAInC,OAAJ,E;AANfC,a,CAOZ+B,mB,GAAsB,IAAIhC,OAAJ,E","sourcesContent":["import { TOTAL_SCREENS } from './commonUtils';\r\nimport { Subject } from 'rxjs';\r\n\r\nexport default class ScrollService {\r\n\r\n  /* SINGLETON CLASS INSTANCE */\r\n  static scrollHandler = new ScrollService();\r\n\r\n  /* BROADCASTERS */\r\n  static currentScreenBroadcaster = new Subject();\r\n  static currentScreenFadeIn = new Subject();\r\n\r\n  constructor() {\r\n    /* ADD SCROLL EVENT TO WINDOW */\r\n    window.addEventListener('scroll', this.checkCurrentScreenUnderViewport);\r\n  }\r\n\r\n  /* SCROLL TO HIRE ME / CONTACT ME SCREEN */\r\n  scrollToHireMe = () => {\r\n    let contactMeScreen = document.getElementById(\"Contact Me\");\r\n    if (!contactMeScreen) return;\r\n\r\n    contactMeScreen.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  /* CHECK IF ELEMENT IS IN VIEW */\r\n  isElementInView = (elem, type) => {\r\n    let rec = elem.getBoundingClientRect();\r\n    let elementTop = rec.top;\r\n    let elemBottom = rec.bottom;\r\n\r\n    /* Partially Visible */\r\n    let partiallyVisible = elementTop < window.innerHeight && elemBottom >= 0;\r\n\r\n    /* Completely Visible */\r\n    let completelyVisible = elementTop >= 0 && elemBottom <= window.innerHeight;\r\n\r\n    switch (type) {\r\n      case \"partial\":\r\n          return partiallyVisible;\r\n        \r\n      case \"complete\":\r\n          return completelyVisible;\r\n    \r\n      default:\r\n          return false;\r\n    }\r\n  };\r\n  \r\n  /* CHECK THE SCREEN THATS CURRENTLY UNDER VIEWPORT */\r\n  checkCurrentScreenUnderViewport = (event) => {\r\n    if(!event || Object.keys(event).length < 1)\r\n    return;\r\n\r\n    for(let screen of TOTAL_SCREENS){\r\n      let screenFromDOM = document.getElementById(screen.screen_name);\r\n      if(!screenFromDOM)\r\n      continue;\r\n\r\n      let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\r\n      let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\r\n\r\n      if(fullyVisible || partiallyVisible) {\r\n        if(partiallyVisible && !screen.alreadyRendered){\r\n          //BROADCAST FADE IN EFFECT\r\n          ScrollService.currentScreenFadeIn.next({\r\n            fadeInScreen: screen.screen_name\r\n          });\r\n          screen['alreadyRendered'] = true;\r\n          break;\r\n        }\r\n\r\n        if (fullyVisible) {\r\n          // BROADCAST SCREEN NAME\r\n          ScrollService.currentScreenBroadcaster.next({\r\n            screenInView: screen.screen_name\r\n          });\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}